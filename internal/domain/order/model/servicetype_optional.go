// Code generated by go generate
// This file was generated by robots at 2020-04-24 14:21:38.469994 +0000 UTC

package model

import (
	"encoding/json"
	"errors"
)

// OptionalServiceType is an optional ServiceType.
type OptionalServiceType struct {
	value *ServiceType
}

// NewOptionalServiceType creates an optional.OptionalServiceType from a ServiceType.
func NewOptionalServiceType(v ServiceType) OptionalServiceType {
	return OptionalServiceType{&v}
}

// Set sets the ServiceType value.
func (o *OptionalServiceType) Set(v ServiceType) {
	o.value = &v
}

// Get returns the ServiceType value or an error if not present.
func (o OptionalServiceType) Get() (ServiceType, error) {
	if !o.Present() {
		var zero ServiceType
		return zero, errors.New("value not present")
	}
	return *o.value, nil
}

// Present returns whether or not the value is present.
func (o OptionalServiceType) Present() bool {
	return o.value != nil
}

// OrElse returns the ServiceType value or a default value if the value is not present.
func (o OptionalServiceType) OrElse(v ServiceType) ServiceType {
	if o.Present() {
		return *o.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (o OptionalServiceType) If(fn func(ServiceType)) {
	if o.Present() {
		fn(*o.value)
	}
}

func (o OptionalServiceType) MarshalJSON() ([]byte, error) {
	if o.Present() {
		return json.Marshal(o.value)
	}
	return json.Marshal(nil)
}

func (o *OptionalServiceType) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		o.value = nil
		return nil
	}

	var value ServiceType

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	o.value = &value
	return nil
}
