// generated by jsonenums -type=ServiceType; DO NOT EDIT

package model

import (
	"encoding/json"
	"fmt"
)

var (
	_ServiceTypeNameToValue = map[string]ServiceType{
		"Pickup":   Pickup,
		"Delivery": Delivery,
	}

	_ServiceTypeValueToName = map[ServiceType]string{
		Pickup:   "Pickup",
		Delivery: "Delivery",
	}
)

func init() {
	var v ServiceType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ServiceTypeNameToValue = map[string]ServiceType{
			interface{}(Pickup).(fmt.Stringer).String():   Pickup,
			interface{}(Delivery).(fmt.Stringer).String(): Delivery,
		}
	}
}

// MarshalJSON is generated so ServiceType satisfies json.Marshaler.
func (r ServiceType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ServiceTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ServiceType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ServiceType satisfies json.Unmarshaler.
func (r *ServiceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ServiceType should be a string, got %s", data)
	}
	v, ok := _ServiceTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ServiceType %q", s)
	}
	*r = v
	return nil
}
