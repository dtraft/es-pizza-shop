# Write API
OrderWriteApi:
  handler: ./.bin/order_writeapi
  package:
    include:
      - ./.bin/order_writeapi
  events:
    - http:
        path: '/orders'
        method: post
        cors: true
    - http:
        path: '/orders/{proxy+}'
        method: post
        cors: true
    - http:
        path: '/orders/{proxy+}'
        method: put
        cors: true
    - http:
        path: '/orders/{proxy+}'
        method: patch
        cors: true
    - http:
        path: '/orders/{proxy+}'
        method: delete
        cors: true
  environment:
    TABLE_NAME: !Ref EventsTable
  iamRoleStatementsName: OrderWriteApiRole-${opt:stage}
  iamRoleStatements:
    - Effect: Allow     
      Action:
        - dynamodb:PutItem   
        - dynamodb:Query     
      Resource: !GetAtt EventsTable.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
      Resource: '*'

# Read API
OrderReadApi:
  handler: ./.bin/order_readapi
  package:
    include:
      - ./.bin/order_readapi
  events:
    - http:
        path: '/orders'
        method: get
        cors: true
    - http:
        path: '/orders/{proxy+}'
        method: get
        cors: true
  environment:
    TABLE_NAME: !Ref OrderTable
    HISTORY_TABLE_NAME: OrderHistoryTable-dev
  iamRoleStatementsName: OrderReadApiRole-${opt:stage}
  iamRoleStatements:
    - Effect: Allow     
      Action:
        - dynamodb:Scan   
        - dynamodb:Query    
        - dynamodb:BatchGetItem
        - dynamodb:GetItem 
      Resource: !GetAtt OrderTable.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
      Resource: '*'

# Projection
OrderProjection:
  handler: ./.bin/order_projection
  package:
    include:
      - ./.bin/order_projection
  environment:
    TABLE_NAME: !Ref OrderTable
  events:
    - sns: 
        arn: !Ref EventBus
        topicName: 'EventBus-${opt:stage}'
        filterPolicy:
          eventType:
            - OrderStartedEvent
            - OrderServiceTypeSetEvent
            - OrderDescriptionSet
            - OrderSubmitted
            - OrderApproved
            - OrderDelivered
  iamRoleStatementsName: 'OrderProjectionRole-${opt:stage}'
  iamRoleStatements:
    - Effect: Allow      
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem   
        - dynamodb:Query     
      Resource: !GetAtt OrderTable.Arn

# Saga
OrderFulfillmentSaga:
  handler: ./.bin/order_fulfillment_saga
  package:
    include:
      - ./.bin/order_fulfillment_saga
  environment:
    EVENT_TABLE_NAME: !Ref EventsTable
    SAGA_TABLE_NAME: !Ref SagaTable
    ASSOCIATIONS_TABLE_NAME: !Ref SagaAssociationTable
  events:
    - sns:
        arn: !Ref EventBus
        topicName: 'EventBus-${opt:stage}'
        filterPolicy:
          eventType:
            - OrderStartedEvent
            - OrderDescriptionSet
            - OrderServiceTypeSetEvent
            - OrderSubmitted
            - ApprovalReceived
            - DeliveryConfirmed
  iamRoleStatementsName: 'OrderFulfillmentSaga-${opt:stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: !GetAtt SagaTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: !GetAtt SagaAssociationTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: !GetAtt EventsTable.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
      Resource: '*'